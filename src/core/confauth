#!/bin/bash



function confauth() {
    clear

    #
    # Configuring backups.
    #
    configure_automatic_backup

    #
    # Configuring network.
    #
    configure_network_interfaces
    configure_dns
    restart_network_services

    #
    # Configuring packages manager.
    #
    configure_apt_preferences
    set_up_aptitude
    configure_package_caching
    configure_automatic_upgrades
    install_package_management_tools

    #
    # Configuring System.
    #
    install_and_configure_software
    detect_and_install_video_drivers
    optimize_cpu_performance
    configure_ram_and_ssd
    configure_power_settings
    update_firmware
    manage_device_drivers
    optimize_temp_files
    install_diagnostic_tools

    #
    # Configuring Audio.
    #
    adjust_volume
    adjust_balance
    set_input_device
    set_output_device
    configure_audio_profile
    install_audio_tools

    #
    # Configuring Security.
    #
    configure_firewall
    harden_ssh
    install_configure_fail2ban
    install_configure_apparmor
    configure_auditd
    apply_kernel_security
    configure_ssh_rate_limiting
    install_configure_clamav
    block_unused_ports
    install_configure_rkhunter
    configure_fail2ban_for_services
    enforce_password_policy
    install_configure_aide
    configure_logrotate

    #
    # Finish the update
    #
    prompt_reboot
}



function configure_automatic_backup() {
    echo "Setting up automatic backup."

    SOURCE_DIR="$HOME"
    BACKUP_BASE_DIR="$HOME/Backups"
    
    mkdir -p "$BACKUP_BASE_DIR"

    CRON_JOB="0 2 1 * * mkdir -p \$HOME/Backups/\$(date +\%Y)/\$(date +\%B) && rsync -avh --delete --exclude='\Backups' \$HOME/ \$HOME/Backups/\$(date +\%Y)/\$(date +\%B)/"

    (crontab -l; echo "$CRON_JOB") | crontab -

    echo "Automatic backup configured."
}



function configure_network_interfaces() {
    echo "Configuring all network interfaces..."

    INTERFACES=$(ip link show | awk '/^[0-9]+:/{print $2}' | sed 's/://')

    for INTERFACE in $INTERFACES; do
        echo "Configuring interface: $INTERFACE"
        sudo ip link set "$INTERFACE" up

        if ip link show "$INTERFACE" | grep -q 'ether'; then
            echo "$INTERFACE is an Ethernet interface."
            configure_dhcp "$INTERFACE"
        elif ip link show "$INTERFACE" | grep -q 'wl\|wlan'; then
            echo "$INTERFACE is a Wi-Fi interface."
            configure_dhcp "$INTERFACE"
        else
            echo "$INTERFACE is of unknown type."
        fi
    done
}



function configure_dhcp() {
    INTERFACE=$1

    echo "Configuring DHCP on $INTERFACE..."

    sudo ip addr flush dev "$INTERFACE"
    sudo ip route flush dev "$INTERFACE"
    sudo dhclient "$INTERFACE"

    echo "DHCP configuration applied to the $INTERFACE interface."
}



function configure_dns() {
    echo "Configuring DNS servers..."

    DNS1="1.1.1.1"
    DNS2="1.0.0.1"

    echo "nameserver $DNS1" | sudo tee /etc/resolv.conf > /dev/null
    echo "nameserver $DNS2" | sudo tee -a /etc/resolv.conf > /dev/null

    echo "DNS configuration applied: $DNS1 ${DNS2:+and $DNS2}"
}



function restart_network_services() {
    echo "Restarting network services..."

    sudo systemctl restart networking
    sudo systemctl restart NetworkManager

    echo "Network services restarted."
}



function configure_apt_preferences() {
    echo "Configuring APT preferences..."

    sudo mkdir -p /etc/apt/preferences.d

    echo "Package: *" | sudo tee /etc/apt/preferences.d/custom.pref > /dev/null
    echo "Pin: release a=stable" | sudo tee -a /etc/apt/preferences.d/custom.pref > /dev/null
    echo "Pin-Priority: 500" | sudo tee -a /etc/apt/preferences.d/custom.pref > /dev/null
    
    echo "APT preferences configured."
}



function set_up_aptitude() {
    echo "Configuring Aptitude..."

    sudo apt install -y aptitude

    echo "Aptitude installed and configured."
}



function configure_package_caching() {
    echo "Configuring package caching..."
    echo "Configuring APT cache directories..."
    
    sudo mkdir -p /var/cache/apt/archives/partial
    sudo chmod 755 /var/cache/apt/archives/partial

    echo "Configuring APT cache clearing..."
    echo "APT::Clean-Installed \"true\";" | sudo tee /etc/apt/apt.conf.d/10clean > /dev/null

    echo "Packet cache configured."
}



function configure_automatic_upgrades() {
    echo "Configuring automatic updates..."

    echo "Installing unattended-upgrades..."

    sudo apt install -y unattended-upgrades

    echo "Configuring unattended-upgrades..."

    sudo dpkg-reconfigure --priority=low unattended-upgrades

    echo "Automatic updates configured."
}



function install_package_management_tools() {
    echo "Installing package management tools..."

    sudo apt install -y apt-listchanges debconf-utils

    echo "Package management tools installed."
}



function install_and_configure_software() {
    echo "Installing and configuring essential software..."
    
    sudo apt update -y
    sudo apt install -y curl git vim htop build-essential preload

    echo "Essential software successfully installed."
}



function detect_and_install_video_drivers() {
    echo "Detecting and installing video drivers..."

    GPU_MODEL=$(lspci | grep -i vga | awk -F: '{print $3}')

    echo "GPU detected: $GPU_MODEL"

    case $GPU_MODEL in
        *NVIDIA*)
            sudo apt install -y nvidia-driver
            ;;
        *AMD*)
            sudo apt install -y firmware-amd-graphics
            ;;
        *Intel*)
            echo "Intel GPU detected. No proprietary drivers required."
            ;;
        *)
            echo "Unknown GPU. Install drivers manually."
            ;;
    esac

    echo "Video drivers installed based on detected GPU."
}



function optimize_cpu_performance() {
    echo "Optimize CPU performance..."

    sudo apt install -y cpufrequtils

    echo "GOVERNOR='performance'" | sudo tee /etc/default/cpufrequtils > /dev/null
    sudo systemctl restart cpufrequtils

    echo "CPU performance optimization applied."
}



function configure_ram_and_ssd() {
    echo "Configuring RAM and SSD settings..."

    sudo apt install -y preload

    echo "Configuring swapfile..."
    
    SWAPFILE="/swapfile"
    
    sudo fallocate -l 2G "$SWAPFILE"
    sudo chmod 600 "$SWAPFILE"
    sudo mkswap "$SWAPFILE"
    sudo swapon "$SWAPFILE"
    
    echo "$SWAPFILE none swap sw 0 0" | sudo tee -a /etc/fstab > /dev/null

    if grep -q "discard" /etc/fstab; then
        echo "TRIM is already enabled."
    else
        echo "Enabling TRIM for SSD..."
    
        sudo sed -i 's/\(.*\)\s\([^#]\)/\1 discard \2/' /etc/fstab
    fi

    echo "RAM and SSD settings configured."
}



function configure_power_settings() {
    echo "Configuring power settings..."

    sudo apt install -y tlp
    sudo systemctl enable tlp
    sudo systemctl start tlp

    echo "Power settings configured with TLP."
}



function update_firmware() {
    echo "Updating the system firmware..."

    sudo apt install -y fwupd
    sudo fwupdmgr update

    echo "Updated system firmware."
}



function manage_device_drivers() {
    echo "Managing additional device drivers..."

    sudo apt install -y linux-firmware

    echo "Additional device drivers managed."
}



function install_diagnostic_tools() {
    echo "Installing diagnostic tools..."

    sudo apt install -y smartmontools lm-sensors
    sudo sensors-detect --auto

    echo "Diagnostic tools installed and sensors detected."
}



function adjust_volume() {
    echo "Adjusting volume..."
    
    amixer -D pulse sset Master 80%
    
    echo "Volume adjusted successfully!"
}



function adjust_balance() {
    echo "Adjusting audio balance..."

    amixer -D pulse sset Master 50%,50%
    
    echo "Audio balance adjusted successfully!"
}



function set_input_device() {
    echo "Configuring the default input device..."
    default_input=$(pactl list sources short | grep -m 1 RUNNING | awk '{print $1}')
    
    if [ -z "$default_input" ]; then
        echo "No active input devices found, using the first available one."
        default_input=$(pactl list sources short | awk '{print $1}' | head -n 1)
    fi
    
    pactl set-default-source "$default_input"
    
    echo "Input device set to $default_input."
}



function set_output_device() {
    echo "Configuring the default output device..."
    default_output=$(pactl list sinks short | grep -m 1 RUNNING | awk '{print $1}')
    
    if [ -z "$default_output" ]; then
        echo "No active output devices found, using the first available one."
        default_output=$(pactl list sinks short | awk '{print $1}' | head -n 1)
    fi
    
    pactl set-default-sink "$default_output"
    
    echo "Output device set to $default_output."
}



function configure_audio_profile() {
    echo "Configurando o perfil de áudio padrão..."
    
    default_card=$(pactl list cards short | awk '{print $1}' | head -n 1)
    default_profile=$(pactl list cards | grep -A 20 "Cartão #$default_card" | grep 'output:' | awk '{print $1}' | head -n 1)
    
    pactl set-card-profile "$cartão_default" "$perfil_default"
    
    echo "Perfil de áudio $default_profile configurado para a placa de som $default_card."
}



function install_audio_tools() {
    echo "Installing audio tools (ALSA and PulseAudio)..."

    sudo apt update -y
    sudo apt install -y alsa-utils pavucontrol pulseaudio

    echo "Tools installed."
}



function configure_firewall() {
    echo "Configurando Firewall com UFW..."

    sudo apt install -y ufw
    sudo ufw default deny incoming
    sudo ufw default allow outgoing
    sudo ufw allow ssh;
    sudo ufw enable

    echo "Firewall configurado e habilitado."
}



function harden_ssh() {
    echo "Hardening SSH Configuration..."

    sudo sed -i 's/#Port 22/Port 22/' /etc/ssh/sshd_config
    sudo sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin no/' /etc/ssh/sshd_config
    sudo sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config
    sudo sed -i 's/#PermitEmptyPasswords no/PermitEmptyPasswords no/' /etc/ssh/sshd_config
    sudo sed -i 's/#ChallengeResponseAuthentication no/ChallengeResponseAuthentication no/' /etc/ssh/sshd_config
    sudo sed -i 's/#UsePAM yes/UsePAM yes/' /etc/ssh/sshd_config

    echo "Allowing key authentication only..."

    sudo sed -i 's/#PubkeyAuthentication yes/PubkeyAuthentication yes/' /etc/ssh/sshd_config
    sudo systemctl restart sshd

    echo "Hardened SSH configuration."
}



function install_configure_fail2ban() {
    echo "Installing and Configuring Fail2Ban..."

    sudo apt install -y fail2ban
    sudo systemctl enable fail2ban
    sudo systemctl start fail2ban

    echo "Fail2Ban installed and configured with default settings."
}



function install_configure_apparmor() {
    echo "Installing and Configuring AppArmor..."
                
    sudo apt install -y apparmor apparmor-utils
    sudo systemctl enable apparmor
    sudo systemctl start apparmor
    
    echo "AppArmor installed and activated."
}



function configure_auditd() {
    echo "Configuring Auditd for System Auditing..."

    sudo apt install -y auditd audispd-plugins

    sudo systemctl enable auditd
    sudo systemctl start auditd

    echo "Auditd installed and activated."
}


function apply_kernel_security() {
    echo "Applying Kernel Security Settings..."
    echo "Applying sysctl security settings..."
    
    sudo tee -a /etc/sysctl.conf > /dev/null <<EOL
# Disable IP source routing
net.ipv4.conf.all.accept_source_route = 0
net.ipv6.conf.all.accept_source_route = 0

# Disable packet forwarding
net.ipv4.ip_forward = 0
net.ipv6.conf.all.forwarding = 0

# Enable IP spoofing protection
net.ipv4.conf.all.rp_filter = 1

# Enable SYN cookies
net.ipv4.tcp_syncookies = 1

# Disable ICMP redirects
net.ipv4.conf.all.accept_redirects = 0
net.ipv6.conf.all.accept_redirects = 0

# Disable sending redirects
net.ipv4.conf.all.send_redirects = 0

# Enable ExecShield (if supported)
kernel.exec-shield = 1
kernel.randomize_va_space = 2
EOL

    sudo sysctl -p

    echo "Kernel security settings applied."
}



function configure_ssh_rate_limiting() {
    echo "Configuring SSH rate limiting..."

    sudo tee /etc/ufw/applications.d/ufw-ssh-rate-limit > /dev/null <<EOL
[OpenSSH]
title=OpenSSH Server
description=OpenSSH Server
ports=22/tcp
EOL

    sudo ufw app update OpenSSH
    sudo ufw limit OpenSSH

    echo "SSH rate limiting configured."
}



function install_configure_clamav() {
    echo "Installing and Configuring ClamAV..."

    sudo apt install -y clamav clamav-daemon
    sudo freshclam
    sudo systemctl enable clamav-daemon
    sudo systemctl start clamav-daemon

    echo "ClamAV installed and configured."
}



function block_unused_ports() {
    echo "Blocking unused ports..."

    PORTS=(23 25 110 143)

    for PORT in "${PORTS[@]}"; do
        sudo ufw deny $PORT
    done

    echo "Unused ports blocked."
}



function install_configure_rkhunter() {
    echo "Installing and Configuring rkhunter..."

    sudo apt install -y rkhunter
    sudo rkhunter --update
    sudo rkhunter --propupd

    echo "rkhunter installed and configured. Run 'rkhunter --check' to verify."
}



function configure_fail2ban_for_services() {
    echo "Configuring Fail2Ban for additional services..."

    local SERVICES=("apache-auth" "nginx-http-auth" "postfix" "dovecot")

    for SERVICE in "${SERVICES[@]}"; do
        sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local
        sudo sed -i "s/\[$SERVICE\]/\[$SERVICE\]\nenabled = true/" /etc/fail2ban/jail.local
    done

    sudo systemctl restart fail2ban

    echo "Fail2Ban configured for additional services."
}



function enforce_password_policy() {
    echo "Implementing strong password policy..."

    sudo apt install -y libpam-pwquality
    sudo sed -i '/pam_pwquality.so/ s/retry=3/retry=3 minlen=12 dcredit=-1 ucredit=-1 ocredit=-1 lcredit=-1/' /etc/pam.d/common-password

    echo "Strong password policy implemented."
}



function install_configure_aide() {
    echo "Installing and Configuring AIDE..."

    sudo apt install -y aide
    sudo aideinit
    sudo mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db

    echo "AIDE installed and initialized. Run 'aide --check' to check the integrity of the files."
}



function configure_logrotate() {
    echo "Configuring log rotation..."

    sudo apt install -y logrotate
    sudo logrotate -f /etc/logrotate.conf

    echo "Log rotation configured."
}



function prompt_reboot() {
    read -p "Would you like to reboot the system now? (y/n): " REBOOT_RESPONSE
    if [[ "$REBOOT_RESPONSE" =~ ^[Yy]$ ]]; then
        echo "Rebooting the system..."
        sudo reboot
    else
        clear
        
        echo "System will not be rebooted. Please reboot manually to apply changes."
        
        exit 0
    fi
}