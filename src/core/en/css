#!/bin/bash



function configure_security_systems_en() {
    local CHOICE=-1

    while true; do
        clear

        echo "Choose an option to configure security:"
        echo "1. Configure Firewall with UFW"
        echo "2. Harden SSH Configuration"
        echo "3. Install and Configure Fail2Ban"
        echo "4. Configure Automatic Security Updates"
        echo "5. Install and Configure AppArmor/SELinux"
        echo "6. Configure Auditd for System Auditing"
        echo "7. Set Up Log Monitoring"
        echo "8. Configure Disk Encryption"
        echo "9. Apply Kernel Security Settings"
        echo "10. Configure SSH Rate Limiting"
        echo "11. Configure NTP"
        echo "12. Install and Configure ClamAV"
        echo "13. Block Unused Ports"
        echo "14. Install and Configure rkhunter"
        echo "15. Configure SSH Two-Factor Authentication (2FA)"
        echo "16. Configure fail2ban for Services"
        echo "17. Install and Configure Intrusion Detection/Prevention System"
        echo "18. Enforce Password Policy"
        echo "19. Install and Configure Advanced Intrusion Detection Environment"
        echo "20. Show Security Configuration"
        echo "21. Return to Main Menu"

        read -p "Your choice (1-21): " CHOICE

        case $CHOICE in
            1) configure_firewall ;;
            2) harden_ssh ;;
            3) install_configure_fail2ban ;;
            4) configure_security_updates ;;
            5) install_configure_apparmor_selinux ;;
            6) configure_auditd ;;
            7) setup_log_monitoring ;;
            8) configure_disk_encryption ;;
            9) apply_kernel_security ;;
            10) configure_ssh_rate_limiting ;;
            11) configure_ntp ;;
            12) install_configure_clamav ;;
            13) block_unused_ports ;;
            14) install_configure_rkhunter ;;
            15) configure_ssh_2fa ;;
            16) configure_fail2ban_for_services ;;
            17) install_configure_ids_ips ;;
            18) enforce_password_policy ;;
            19) install_configure_aide ;;
            20) show_security_configuration ;;
            21) break ;;
            *) echo "Invalid option. Please try again." ;;
        esac
    done
}



function configure_firewall() {
    echo "Configuring Firewall with UFW..."

    sudo apt install -y ufw
    sudo ufw default deny incoming
    sudo ufw default allow outgoing

    while true; do
        read -p "Would you like to allow SSH connections (y/n)? " ALLOW_SSH
        case $ALLOW_SSH in
            [Yy]* ) sudo ufw allow ssh; echo "SSH allowed."; break ;;
            [Nn]* ) echo "SSH not allowed."; break ;;
            * ) echo "Please answer yes or no." ;;
        esac
    done

    sudo ufw enable

    echo "Firewall configured and enabled."
}



function harden_ssh() {
    echo "Hardening SSH Configuration..."

    sudo sed -i 's/#Port 22/Port 22/' /etc/ssh/sshd_config
    sudo sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin no/' /etc/ssh/sshd_config
    sudo sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config
    sudo sed -i 's/#PermitEmptyPasswords no/PermitEmptyPasswords no/' /etc/ssh/sshd_config
    sudo sed -i 's/#ChallengeResponseAuthentication no/ChallengeResponseAuthentication no/' /etc/ssh/sshd_config
    sudo sed -i 's/#UsePAM yes/UsePAM yes/' /etc/ssh/sshd_config

    echo "Allowing only key-based authentication..."
    sudo sed -i 's/#PubkeyAuthentication yes/PubkeyAuthentication yes/' /etc/ssh/sshd_config

    sudo systemctl restart sshd

    echo "SSH configuration hardened."
}



function install_configure_fail2ban() {
    echo "Installing and Configuring Fail2Ban..."

    sudo apt install -y fail2ban

    sudo systemctl enable fail2ban
    sudo systemctl start fail2ban

    echo "Fail2Ban installed and configured with default settings."
}



function configure_security_updates() {
    echo "Configuring Automatic Security Updates..."

    sudo apt install -y unattended-upgrades

    sudo dpkg-reconfigure --priority=low unattended-upgrades

    echo "Automatic security updates configured."
}



function install_configure_apparmor_selinux() {
    echo "Installing and Configuring AppArmor/SELinux..."

    while true; do
        read -p "Which security module would you like to configure? (1 for AppArmor, 2 for SELinux): " SEC_MODULE
        case $SEC_MODULE in
            1)
                sudo apt install -y apparmor apparmor-utils
                sudo systemctl enable apparmor
                sudo systemctl start apparmor
                echo "AppArmor installed and enabled."
                break
                ;;
            2)
                sudo apt install -y selinux-basics selinux-utils selinux-policy-default auditd
                sudo selinux-activate
                sudo selinux-config-enforcing
                echo "SELinux installed and configured in enforcing mode."
                break
                ;;
            *)
                echo "Invalid option. Please choose 1 for AppArmor or 2 for SELinux."
                ;;
        esac
    done
}



function configure_auditd() {
    echo "Configuring Auditd for System Auditing..."

    sudo apt install -y auditd audispd-plugins

    sudo systemctl enable auditd
    sudo systemctl start auditd

    echo "Auditd installed and enabled."
}



function setup_log_monitoring() {
    echo "Setting Up Log Monitoring..."

    sudo apt install -y logwatch

    sudo logwatch --detail High --mailto root --range All --service All

    echo "Log monitoring set up with Logwatch."
}



function configure_disk_encryption() {
    echo "Configuring Disk Encryption..."

    sudo apt install -y cryptsetup

    echo "Disk encryption tools installed. Manual setup required for encryption."

    while true; do
        read -rsn1 input
    
        if [[ $input == 'q' ]]; then
            break
        fi
    done
}



function apply_kernel_security() {
    echo "Applying Kernel Security Settings..."
    echo "Applying sysctl security settings..."
    
    sudo tee -a /etc/sysctl.conf > /dev/null <<EOL
# Disable IP source routing
net.ipv4.conf.all.accept_source_route = 0
net.ipv6.conf.all.accept_source_route = 0

# Disable packet forwarding
net.ipv4.ip_forward = 0
net.ipv6.conf.all.forwarding = 0

# Enable IP spoofing protection
net.ipv4.conf.all.rp_filter = 1

# Enable SYN cookies
net.ipv4.tcp_syncookies = 1

# Disable ICMP redirects
net.ipv4.conf.all.accept_redirects = 0
net.ipv6.conf.all.accept_redirects = 0

# Disable sending of redirects
net.ipv4.conf.all.send_redirects = 0

# Enable ExecShield (if supported)
kernel.exec-shield = 1
kernel.randomize_va_space = 2
EOL

    sudo sysctl -p

    echo "Kernel security settings applied."
}



function show_security_configuration() {
    echo "Showing current security configuration..."

    echo "UFW status:"
    sudo ufw status verbose

    echo
    echo "SSH configuration:"
    grep -E 'Port|PermitRootLogin|PasswordAuthentication|ChallengeResponseAuthentication|UsePAM' /etc/ssh/sshd_config

    echo
    echo "Fail2Ban status:"
    sudo systemctl status fail2ban

    echo
    echo "Auditd status:"
    sudo systemctl status auditd

    echo
    echo "AppArmor status:"
    sudo apparmor_status || echo "AppArmor not configured."

    echo
    echo "SELinux status:"
    sudo sestatus || echo "SELinux not configured."

    echo
    echo "Kernel security settings:"
    sysctl -a | grep -E 'accept_source_route|ip_forward|rp_filter|tcp_syncookies|accept_redirects|send_redirects|exec-shield|randomize_va_space'

    while true; do
        read -rsn1 input
        if [[ $input == 'q' ]]; then
            break
        fi
    done
}



function configure_ssh_rate_limiting() {
    echo "Configuring SSH rate limiting..."

    sudo tee /etc/ufw/applications.d/ufw-ssh-rate-limit > /dev/null <<EOL
[OpenSSH]
title=OpenSSH server
description=OpenSSH server
ports=22/tcp
EOL

    sudo ufw app update OpenSSH
    sudo ufw limit OpenSSH

    echo "SSH rate limiting configured."
}



function configure_ntp() {
    echo "Configuring NTP for time synchronization..."

    sudo apt install -y ntp
    sudo systemctl enable ntp
    sudo systemctl start ntp

    echo "NTP configured and running."
}



function install_configure_clamav() {
    echo "Installing and Configuring ClamAV..."

    sudo apt install -y clamav clamav-daemon
    sudo freshclam
    sudo systemctl enable clamav-daemon
    sudo systemctl start clamav-daemon

    echo "ClamAV installed and configured."
}
