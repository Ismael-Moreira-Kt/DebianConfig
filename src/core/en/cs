#!/bin/bash



function configure_system_en() {
    local CHOICE=-1

    while true; do
        clear

        echo "Choose an option to configure the system and hardware:"
        echo "1. Set Timezone"
        echo "2. Configure Hostname"
        echo "3. Set System Language and Keyboard Layout"
        echo "4. Install and Configure Essential Software"
        echo "5. Detect and Install Video Drivers"
        echo "6. Optimize CPU Performance"
        echo "7. Configure RAM and SSD Settings"
        echo "8. Install Printer and Scanner Software"
        echo "9. Configure Power Settings"
        echo "10. Configure System Security"
        echo "11. Update Firmware"
        echo "12. Configure Backup"
        echo "13. Manage Device Drivers"
        echo "14. Install Diagnostic Tools"
        echo "15. Show System Information"
        echo "16. Return to Main Menu"

        read -p "Your choice (1-16): " CHOICE

        case $CHOICE in
            1) set_timezone ;;
            2) configure_hostname ;;
            3) set_language_and_keyboard ;;
            4) install_and_configure_software ;;
            5) detect_and_install_video_drivers ;;
            6) optimize_cpu_performance ;;
            7) configure_ram_and_ssd ;;
            8) install_printer_scanner_software ;;
            9) configure_power_settings ;;
            10) configure_security ;;
            11) update_firmware ;;
            12) configure_backup ;;
            13) manage_device_drivers ;;
            15) install_diagnostic_tools ;;
            16) show_system_info ;;
            17) break ;;
            *) echo "Invalid option. Please try again." ;;
        esac
    done
}



function set_timezone() {
    while true; do
        echo "Setting the system timezone..."
        read -p "Enter the timezone (e.g., America/New_York): " TIMEZONE
        
        if timedatectl list-timezones | grep -q "^$TIMEZONE$"; then
            sudo timedatectl set-timezone "$TIMEZONE"
            echo "Timezone set to $TIMEZONE."
        
            break
        else
            echo "Invalid timezone. Please try again."
        fi
    done
}



function configure_hostname() {
    while true; do
        echo "Configuring the system hostname..."
        read -p "Enter the new hostname: " HOSTNAME
        
        if [[ "$HOSTNAME" =~ ^[a-zA-Z0-9_-]+$ ]]; then
            sudo hostnamectl set-hostname "$HOSTNAME"
            sudo sed -i "s/127.0.1.1.*/127.0.1.1 $HOSTNAME/" /etc/hosts
        
            echo "Hostname set to $HOSTNAME."
        
            break
        else
            echo "Invalid hostname. Only alphanumeric characters, hyphens, and underscores are allowed."
        fi
    done
}



function set_language_and_keyboard() {
    while true; do
        echo "Configuring system language and keyboard layout..."
        read -p "Enter the system locale (e.g., en_US.UTF-8): " LOCALE
        
        if locale -a | grep -q "^$LOCALE\$"; then
            sudo update-locale LANG="$LOCALE"
        
            break
        else
            echo "Invalid locale. Please try again."
        fi
    done

    while true; do
        read -p "Enter the keyboard layout (e.g., us): " KEYBOARD_LAYOUT
        
        if localectl list-keymaps | grep -q "^$KEYBOARD_LAYOUT$"; then
            sudo localectl set-keymap "$KEYBOARD_LAYOUT"
        
            echo "System language set to $LOCALE and keyboard layout set to $KEYBOARD_LAYOUT."
        
            break
        else
            echo "Invalid keyboard layout. Please try again."
        fi
    done
}



function install_and_configure_software() {
    echo "Installing and configuring essential software..."
    
    sudo apt update -y
    sudo apt install -y curl git vim htop build-essential preload

    echo "Essential software installed successfully."
}



function detect_and_install_video_drivers() {
    echo "Detecting and installing video drivers..."

    GPU_MODEL=$(lspci | grep -i vga | awk -F: '{print $3}')

    echo "Detected GPU: $GPU_MODEL"

    case $GPU_MODEL in
        *NVIDIA*)
            sudo apt install -y nvidia-driver
            ;;
        *AMD*)
            sudo apt install -y firmware-amd-graphics
            ;;
        *Intel*)
            echo "Intel GPU detected. No proprietary driver needed."
            ;;
        *)
            echo "Unknown GPU. Please install drivers manually."
            ;;
    esac

    echo "Video drivers installed based on detected GPU."
}



function optimize_cpu_performance() {
    echo "Optimizing CPU performance..."

    sudo apt install -y cpufrequtils

    echo "GOVERNOR='performance'" | sudo tee /etc/default/cpufrequtils > /dev/null
 
    sudo systemctl restart cpufrequtils

    echo "CPU performance optimization applied."
}



function configure_ram_and_ssd() {
    echo "Configuring RAM and SSD settings..."

    sudo apt install -y preload

    echo "Configuring swap file..."
    
    SWAPFILE="/swapfile"
    
    sudo fallocate -l 2G "$SWAPFILE"
    sudo chmod 600 "$SWAPFILE"
    sudo mkswap "$SWAPFILE"
    sudo swapon "$SWAPFILE"
    
    echo "$SWAPFILE none swap sw 0 0" | sudo tee -a /etc/fstab > /dev/null

    if grep -q "discard" /etc/fstab; then
        echo "TRIM is already enabled."
    else
        echo "Enabling TRIM for SSD..."
    
        sudo sed -i 's/\(.*\)\s\([^#]\)/\1 discard \2/' /etc/fstab
    fi

    echo "RAM and SSD settings configured."
}



function show_system_info() {
    echo "Showing system information..."

    echo "System Details:"
    
    uname -a

    echo
    echo "Memory Usage:"
    
    free -h

    echo
    echo "Disk Usage:"
    
    df -h

    echo
    echo "CPU Information:"
    
    lscpu

    echo
    echo "GPU Information:"
    
    lspci | grep -i vga

    echo

    while true; do
        read -rsn1 input
        
        if [[ $input == 'q' ]]; then
            break
        fi
    done
}



function install_printer_scanner_software() {
    echo "Installing printer and scanner software..."

    sudo apt install -y cups hplip sane

    echo "Printer and scanner software installed."
}



function configure_power_settings() {
    echo "Configuring power settings..."

    sudo apt install -y tlp
    sudo systemctl enable tlp
    sudo systemctl start tlp

    echo "Power settings configured with TLP."
}



function configure_security() {
    echo "Configuring system security..."

    sudo apt install -y ufw fail2ban
    sudo ufw enable
    sudo ufw default deny incoming
    sudo ufw default allow outgoing

    echo "Security configuration completed with UFW and Fail2Ban."
}



function update_firmware() {
    echo -e "\n\n"
    echo "Checking if the system is running in UEFI mode..."

    if [ -d /sys/firmware/efi ]; then
        echo "System is running in UEFI mode. Proceeding with firmware update..."

        echo "Updating the system firmware..."
        
        if ! sudo apt install -y fwupd; then
            echo "Failed to install fwupd."
            return 1
        fi
        
        if ! sudo fwupdmgr update; then
            echo "Firmware update failed."
            return 1
        fi
        
        echo "System firmware updated successfully."

    else
        echo "Warning: System is running in Legacy BIOS mode."
        echo "UEFI firmware updates cannot be applied in Legacy BIOS mode."
        echo "Please reboot into UEFI mode to perform the firmware update."
    fi
}



function manage_device_drivers() {
    echo "Managing additional device drivers..."

    sudo apt install -y linux-firmware

    echo "Additional device drivers managed."
}



function install_diagnostic_tools() {
    echo "Installing diagnostic tools..."

    sudo apt install -y smartmontools lm-sensors
    sudo sensors-detect --auto

    echo "Diagnostic tools installed and sensors detected."
}